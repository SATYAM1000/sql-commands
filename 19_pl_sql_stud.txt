DECLARE
  v_roll Stud.Roll%TYPE;
  v_attendance Stud.Att%TYPE;
BEGIN
  -- Get the Roll number from the user
  v_roll := &Enter_Roll_Number;

  -- Fetch the attendance for the entered Roll number
  SELECT Att INTO v_attendance
  FROM Stud
  WHERE Roll = v_roll;

  -- Check attendance and update the status
  IF v_attendance < 75 THEN
    UPDATE Stud
    SET Status = 'D'
    WHERE Roll = v_roll;
    DBMS_OUTPUT.PUT_LINE('Term not granted');
  ELSE
    UPDATE Stud
    SET Status = 'ND'
    WHERE Roll = v_roll;
    DBMS_OUTPUT.PUT_LINE('Term granted');
  END IF;
  
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Roll number not found');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occurred');
END;
/

DECLARE
  v_account_balance NUMBER := 1000; -- Initial account balance
  v_withdrawal_amount NUMBER := &Enter_Withdrawal_Amount;
  
  -- Define a user-defined exception
  insufficient_funds EXCEPTION;
  PRAGMA EXCEPTION_INIT(insufficient_funds, -20000);
BEGIN
  -- Check if withdrawal amount exceeds the account balance
  IF v_withdrawal_amount > v_account_balance THEN
    RAISE insufficient_funds;
  ELSE
    -- Deduct the withdrawal amount from the account balance
    v_account_balance := v_account_balance - v_withdrawal_amount;
    DBMS_OUTPUT.PUT_LINE('Withdrawal successful. New balance: ' || v_account_balance);
  END IF;
  
EXCEPTION
  WHEN insufficient_funds THEN
    DBMS_OUTPUT.PUT_LINE('Insufficient funds. Withdrawal denied.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occurred');
END;
/

